##################################################
## ECONOMY SCRIPTED EFFECTS FOR EOANB-R MODDERS ##
## - written & coded by Strat                   ##
##################################################

## INTRODUCTION ##
#       This file is meant to be a full list of all scripted effects/functions that EoaNB-R modders can use in their focus trees, events, decisions,
#   scripted guis (if you are into that type of thing), or wherever else you have effects. Anywhere where the effects on the HOI4 wiki can be used, these
#   can be used as well

## BEFORE SCROLLING THROUGH THIS FILE ##
#       This file is broken up by comments and indentation. If you are using VS-Code, I highly recommend going into your extensions (four boxes on the
#   left with one box detached) and searching up "Paradox Syntax" and installing it. That way, comments are colored green and so it is much easier to read
#   complicated files like this one with a lot of comments.
#
#       I also highly recommend using a program which allows you to *hide* indented code. In VS-Code, if you hover over near where the line numbers are
#   on the left side next to an area that is indented, then a down arrow will appear which you can click to hide sections of this document. It is very handy
#   to sift through large files like this one.

## HOW TO READ THIS FILE ##
    ### Scope ###
        ## Category ##
            # [Temp Variable Parameter 1] - description of parameter 1
            # [Temp Variable Parameter 2] - description of parameter 2
            # ...
            # |Temp Variable Output 1| - description of output 1
            # |Temp Variable Output 2| - description of output 2
            # ...
            # { Examples } 
            #   Description 
            #   NOTE: Additional Notes
            # scripted_effect = {
            #   written_code
            # }
            # ...
        ##
    ###

## HOW TO USE THESE EFFECTS ##
#
#   set_temp_variable = { input_1 = value }     # Set inputs as temporary variables
#   scripted_effect = yes                       # Call scripted effect. This will also clear the temporary variable inputs so you do not have to worry about those.
#   set_temp_variable = { tmp_var = output_1 }  # Use output variables. These are temporary variables which ONLY clear at the end of an effect.
#   add_political_power = var:output_1
#   set_variable = { variable = output_1 }
#
#   set_temp_variable = { output_1 = 0 }        # If you're using another effect in the same file, then it might be wise to set the outputs to 0.
#                                               # Why? Because if the name of an input & output var is the same, then you can end up with the output of a previous effect
#                                               # affecting the next effect down the chain. Setting all inputs to a value, even if it's the default value, can be a good
#                                               # technique to never run into this issue.

## SOME OF THESE ARE PRETTY SIMPLE? ##
#       Please, PLEASE, for the love of god or whatever you consider holy, if you do NOT know the internal workings of the eco system, USE THE EFFECTS IN THIS FILE AS THEY ARE SHOWN.
#   All necessary information is presented in this file and while there are safeguards to ensure that implementing an effect wrong will not break things, attempting to directly
#   implement effects yourself in your own code may result in breaking the system entirely, depending on what you're doing. Even if your name is Vanadium or Garion.
#
#       Not only that, but it also makes your own files readable to other coders, which includes yourself at a later point when you're looking back at your own code wondering
#   what in the nine hells you created.
#
#       And also, I might go back in to *edit* these effects if I learn that a specific use case breaks the system. And if I learn that you're the reason why the eco is breaking, then
#   there will be hell to pay.

## QUESTIONS? ##
#       Ask me (Strat#1069 on Discord) if you need help or are struggling to understand how to use a specific effect. I can always edit this file when needed to make things more clear.
#   Also, if you want me to add an effect or a functionality to an existing effect that you want, then please, ask me! I can implement it.



#### TABLE OF CONTENTS ####
    # The letter_number codes are unique sequences which you can double-click and select then ctrl-f to find and skip right to where you want to go. It's the closest I can get to hyperlinks

    ### Any Scope ### aa_00

    ### State Scope ### bb_00
        ## Buildings ## bb_10
        ## Pops ## bb_20
        ## Resources ## bb_30
        ## Corporations ## bb_40

    ### Country Scope ### cc_00
        ## Budget ## cc_10
        ## Trade ## cc_20
        ## Economy ## cc_30
        ## Population ## cc_40

####     END OF ToC     ####



### ANY SCOPE ### aa_00

###

### STATE SCOPE ### bb_00
    ## Buildings ## bb_10

        # LIST OF BUILDING TOKENS:
            # Urban:
            #   building_port
            #   building_airport
            #
            #   building_military_industry
            #   building_civilian_industry
            #   building_naval_industry
            #
            #   building_consumer_goods_factory
            #   building_luxury_goods_factory
            #   building_industrial_goods_factory
            #   building_services_building
            #   building_power_plant
            #
            # Rural:
            #   building_infrastructure
            #   building_railway
            #
            #   building_rice_paddy         NOTE: Not Interactable
            #   building_subsistence_farm   NOTE: Not Interactable
            #   building_commercial_farm
            #   building_food_plantation
            #   building_material_plantation
            #   building_luxuries_plantation
            #
            #   building_lumber_mill
            #   building_metals_mine
            #   building_coal_mine
            #   building_oil_well
            #   building_valuables_extractor
        #

        # LIST OF BUILDING PRODUCTION METHODS:
            # Roman Num.    Name (Year)                     ID
            # I             Basic (Pre-Industrial)          0
            # II            Advanced (1800s-1820s)          1
            # III           Industrialized (1830s-50s)      2
            # IV            Mechanized (1860s-80s)          3
            # V             Electrified (1890s-1910s)       4
            # VI            Motorized (1920s-40s)           5
            # VII           Modernized (1950s-60s)          6
            # VIII          Roboticized (1970s-80s)         7
            # IX            Computerized (1990s-2000s)      8
            # X             Digitalized (2010s-2020s)       9
            # XI            Automatized (2030s-2040s)       10
            # XII           Futurized (2050s)               11
        #
        
        # [x_temp] - OPTIONAL. Integer value. Amount of buildings of the given type to build. Default is 1.
        # [financer_temp] - OPTIONAL. The entity that is financing this construction. Default, 0, is local, a state scope is a corporation (if present), country scope is government
        # [building_token] - Building type to be built. Set as token:building_>building type<. Refer to building token list above.
        # [production_method_temp] - Integer value. Production Method to be used. Use -1 for the latest production method. Only truly necessary for new buildings in the state, but a good practice nonetheless.
        # {
        #   set_temp_variable = { x_temp = 1 }
        #   set_temp_variable = { financer_temp = ROOT }
        #   set_temp_variable = { building_token = token:building_consumer_goods_factory }
        #   set_temp_variable = { production_method_temp = -1 }
        #   construct_x_buildings = yes
        # }
        #
        #   Starts construction of the given building type in the state. Does NOT allow Rice Paddies/Subsistence Farms. If provided a production method that is too advanced (that you don't have tech for 
        #   or the building doesn't support) or simple (that the building doesn't support), then it will auto adjust. However, if there is not a valid PM available, then the building will not start construction.
        #   Negative values do NOT work.
        #   
        construct_x_buildings = {
            round_temp_variable = x_temp
            round_temp_variable = production_method_temp
            if = {
                limit = {
                    check_variable = { x_temp = 0 }
                }
                set_temp_variable = { x_temp = 1 }
            }

            set_temp_variable = { pm_temp = production_method_temp }
            correct_production_method = yes
            if = {
                limit = {
                    is_in_array = { global.building_token_array = building_token }
                    NOT = { check_variable = { building_token = token:building_rice_paddy } }
                    NOT = { check_variable = { building_token = token:building_subsistence_farm } }
                    NOT = { check_variable = { pm_temp = -1 } }
                    check_variable = { x_temp > 0 }
                }
                set_temp_variable = { production_method_temp = pm_temp }
		        construct_x_buildings_no_update = yes
                reload_building_array = yes
                
				refresh_construction_list = yes
            }
            set_temp_variable = { x_temp = 0 }
            set_temp_variable = { financer_temp = 0 }
            set_temp_variable = { building_token = 0 }
            set_temp_variable = { production_method_temp = 0 }
        }
				
        # [x_temp] - OPTIONAL. Integer value. Amount of buildings of the given type to remove. Default is 1.
        # [building_token] - Building type to be removed. Set as token:building_>building type<. Refer to building token list above.
        # {
        #   set_temp_variable = { building_token = token:building_consumer_goods_factory }
        #   remove_x_buildings = yes
        # }
        #
        #   Removes X buildings from the state. Does NOT allow removal of Rice Paddies/Subsistence Farms. Negative values do NOT work. Any building which reaches size 0 will be removed from the state.
        #
        remove_x_buildings = {
            round_temp_variable = x_temp

            if = {
                limit = {
                    check_variable = { x_temp = 0 }
                }
                set_temp_variable = { x_temp = 1 }
            }

            if = {
                limit = {
                    is_in_array = { global.building_token_array = building_token }
                    NOT = { check_variable = { building_token = token:building_rice_paddy } }
                    NOT = { check_variable = { building_token = token:building_subsistence_farm } }
                    check_variable = { x_temp > 0 }
                }
                if = {
                    limit = {
                        check_variable = { x_temp > size@var:building_token }
                    }
                    set_variable = { size@var:building_token = 0 }
                }
                else = {
                    subtract_from_variable = { size@var:building_token = x_temp }
                }

                if = { #Keeping the Building
                    limit = {
                        check_variable = { size@var:building_token > 0 }
                    }
                    set_temp_variable = { emp_temp = employed@var:building_token }
                    set_temp_variable = { bu_token = building_token }
                    building_update_workforce = yes
                    if = {
                        limit = {
                            check_variable = { employed@var:building_token > 1000 }
                        }
                        divide_temp_variable = { emp_temp = jobs@var:building_token }
                        multiply_temp_variable = { emp_temp = 100 }
                    }
                    else = {
                        multiply_temp_variable = { emp_temp = 100 }
                        divide_temp_variable = { emp_temp = jobs@var:building_token }
                    }
                    
                    set_variable = { peasants_employed@var:building_token = peasants_jobs@var:building_token }
                    set_variable = { laborers_employed@var:building_token = laborers_jobs@var:building_token }
                    set_variable = { workers_employed@var:building_token = workers_jobs@var:building_token }
                    set_variable = { professionals_employed@var:building_token = professionals_jobs@var:building_token }
                    set_variable = { specialists_employed@var:building_token = specialists_jobs@var:building_token }
                    set_variable = { aristocrats_employed@var:building_token = aristocrats_jobs@var:building_token }
                    set_variable = { capitalists_employed@var:building_token = capitalists_jobs@var:building_token }
                    if = {
                        limit = {
                            check_variable = { emp_temp < 100 }
                            check_variable = { jobs@var:building_token > 1000 }
                        }
                        divide_variable = { peasants_employed@var:building_token = 100 }
                        divide_variable = { laborers_employed@var:building_token = 100 }
                        divide_variable = { workers_employed@var:building_token = 100 }
                        divide_variable = { professionals_employed@var:building_token = 100 }
                        divide_variable = { specialists_employed@var:building_token = 100 }
                        divide_variable = { aristocrats_employed@var:building_token = 100 }
                        divide_variable = { capitalists_employed@var:building_token = 100 }

                        multiply_variable = { peasants_employed@var:building_token = emp_temp }
                        multiply_variable = { laborers_employed@var:building_token = emp_temp }
                        multiply_variable = { workers_employed@var:building_token = emp_temp }
                        multiply_variable = { professionals_employed@var:building_token = emp_temp }
                        multiply_variable = { specialists_employed@var:building_token = emp_temp }
                        multiply_variable = { aristocrats_employed@var:building_token = emp_temp }
                        multiply_variable = { capitalists_employed@var:building_token = emp_temp }
                    }
                    else_if = {
                        limit = {
                            check_variable = { emp_temp < 100 }
                        }
                        multiply_variable = { peasants_employed@var:building_token = emp_temp }
                        multiply_variable = { laborers_employed@var:building_token = emp_temp }
                        multiply_variable = { workers_employed@var:building_token = emp_temp }
                        multiply_variable = { professionals_employed@var:building_token = emp_temp }
                        multiply_variable = { specialists_employed@var:building_token = emp_temp }
                        multiply_variable = { aristocrats_employed@var:building_token = emp_temp }
                        multiply_variable = { capitalists_employed@var:building_token = emp_temp }

                        divide_variable = { peasants_employed@var:building_token = 100 }
                        divide_variable = { laborers_employed@var:building_token = 100 }
                        divide_variable = { workers_employed@var:building_token = 100 }
                        divide_variable = { professionals_employed@var:building_token = 100 }
                        divide_variable = { specialists_employed@var:building_token = 100 }
                        divide_variable = { aristocrats_employed@var:building_token = 100 }
                        divide_variable = { capitalists_employed@var:building_token = 100 }
                    }
                }
                else = { #Removing the Building
                    set_variable = { peasants_employed@var:building_token = 0 }
                    set_variable = { laborers_employed@var:building_token = 0 }
                    set_variable = { workers_employed@var:building_token = 0 }
                    set_variable = { professionals_employed@var:building_token = 0 }
                    set_variable = { specialists_employed@var:building_token = 0 }
                    set_variable = { aristocrats_employed@var:building_token = 0 }
                    set_variable = { capitalists_employed@var:building_token = 0 }

                    set_variable = { money@var:building_token = 0 }

                    set_temp_variable = { bu_token = building_token }
                    building_update = yes

                    remove_from_array = { buildings = building_token }
                    if = {
                        limit = {
                            is_in_array = { urban_buildings = building_token }
                        }
                        remove_from_array = { urban_buildings = building_token }
                    }
                    else_if = {
                        limit = {
                            is_in_array = { rural_buildings = building_token }
                        }
                        remove_from_array = { rural_buildings = building_token }
                    }
                
				    refresh_construction_list = yes
                }
                
                buildings_update = yes
                if = {
                    limit = {
                        check_variable = { money@var:building_token > money_limit@var:building_token }
                    }
                    set_variable = { money@var:building_token = money_limit@var:building_token }
                }
                set_temp_variable = { bu_token = 0 }
            }
            
            set_temp_variable = { x_temp = 0 }
            set_temp_variable = { building_token = 0 }
        }

        # upgrade_production_method
        # downgrade_production_method
        # set_production_method
        # set_latest_production_method

    ## Pops ## bb_20
        # add_population
        # migrate_population
        
    ## Resources ## bb_30
    ## Corporations ## bb_40

###

### COUNTRY SCOPE ### cc_00
    ## Budget ## cc_10
        # [x_temp] - Float value. Can be positive or negative. Months of revenue to add/subtract to treasury.
        # {
        #   set_temp_variable = { x_temp = 50 }
        #   add_treasury = yes
        # }
        #
        #   Adds or subtracts money to your treasury. Subtracting treasury beyond negatives will 
        #   add debt. Amount is relative to your government revenue.
        #
        add_months_of_income = {
            multiply_temp_variable = { x_temp = revenue }
            if = {
                limit = {
                    check_variable = { x_temp > 0 }
                }
                add_to_variable = {
                    var = treasury
                    value = x_temp
                    tooltip = treasury_change_positive_tooltip
                }
            }
            else = {
                limit = {
                    check_variable = { x_temp < 0 }
                }
                multiply_temp_variable = { x_temp = -1 }
                subtract_from_variable = {
                    var = treasury
                    value = x_temp
                    tooltip = treasury_change_negative_tooltip
                }
            }

            hidden_effect = {
                set_temp_variable = { debt_amount_temp = 0.5 }
                multiply_temp_variable = { debt_amount_temp = gdp_amount }
                if = {
                    limit = {
                        check_variable = { treasury < 0 }
                    }
                    add_to_variable = { treasury = debt_amount_temp }
                    debt_level_increase_by_1 = yes
                }
            }
            set_temp_variable = { x_temp = 0 }
        }
        
        # [x_temp] - Float value. Can be positive or negative. Amount to add/subtract to treasury.
        # {
        #   set_temp_variable = { x_temp = 50 }
        #   add_treasury = yes
        # }
        #
        #   Adds or subtracts money to your treasury. Subtracting treasury beyond negatives will 
        #   add debt
        #
        add_treasury = {
            if = {
                limit = {
                    check_variable = { x_temp > 0 }
                }
                add_to_variable = {
                    var = treasury
                    value = x_temp
                    tooltip = treasury_change_positive_tooltip
                }
            }
            else = {
                limit = {
                    check_variable = { x_temp < 0 }
                }
                multiply_temp_variable = { x_temp = -1 }
                subtract_from_variable = {
                    var = treasury
                    value = x_temp
                    tooltip = treasury_change_negative_tooltip
                }
            }

            hidden_effect = {
                set_temp_variable = { debt_amount_temp = 0.5 }
                multiply_temp_variable = { debt_amount_temp = gdp_amount }
                if = {
                    limit = {
                        check_variable = { treasury < 0 }
                    }
                    add_to_variable = { treasury = debt_amount_temp }
                    debt_level_increase_by_1 = yes
                }
            }
            set_temp_variable = { x_temp = 0 }
        }

        # print_money

        # set_interest_rate
        # change_interest_rate
        # add_inflation

        # add_loan
        # remove_loan
        # borrow_money
        # repay_debt
        # set_default
    ## Trade ## cc_20
        # set_trade_route - only in nation history

        # add_trade_route
        # upgrade_trade_route
        # downgrade_trade_route
        # remove_trade_route
        # clear_trade_routes
    ## Economy ## cc_30
        # improve_economic_situation
        # worsen_economic_situation

        # proj_create
        # proj_cancel
        # proj_clear
        # proj_complete
    ## Population ## cc_40
###